TEST2_1 폴더에 SourceTree 연결

- aaa.txt 파일생성후 "V0.0 master"	Commit
- dev branch 생성 후 dev.txt 파일 생성 후 "V0.1 dev init" Commit
- feature/func1 branch 생성후 func1.txt 파일생성 후 "V0.2 func1.txt add" Commit
- dev branch 로 이동
- feature/func2 branch 생성후 func2.txt 파일생성 후 "V0.2 func2.txt add" Commit
- feature/func1 branch 를 dev 에 병합
- feature/func2 branch 를 dev 에 병합
- master 에 dev 병합
- 발생하는 충돌이 있을시 적절하게 해결후 Commit merge 할 것.


rebase

조원 1, 2, 3이 각각 feature/func1 , 2, 3 을
dev base 상태로 작업하다가
조원 1이 func1을 dev에 merge했으면.
2, 3에도 적용해줘야하는데 그걸 위해  rebase를 한다.

협업할때 유지보수에 많은 도움이 된다.
func1에서 작업한 후 커밋을 했으면
rebase를 할 껀데 그전에
dev 를 제일 위로 커밋 해줘야한다.



---------------------------
따라하기 rebase
---------------------------
1 SOURCE_TREE_2 GITHUB REPO 생성(Readme생성체크 해서 main브랜치 생성하기)
2 SourceTree 로 Clone 하기
3 developer branch 생성 후 파일추가(dev.txt) 후 "V0.0 Dev's init" Commit
4 feature/board branch 생성 후 board.txt 파일 생성하고 "V0.1 feature/board init" Commit
5 feature/auth branch 생성 후 auth.txt 파일 생성하고 "V0.1 feature/auth init" Commit
6 developer branch 로 이동 후  Readme.md 수정("V0.1 RebaseMerge") 한 다음 commit
7 feature/board branch 를 developer branch로 rebase 처리(developer보다 feature/board branch 가 위에 있어야함)
8 developer branch 에서 rebase 된 feature/board branch 를 병합
9 feature/auth branch 를 developer branch로 rebase 처리(developer보다 feature/board branch 가 위에 있어야함)
10 developer branch 에서 rebase 된 feature/auth branch 를 병합
11 developer branch 를 main 으로 병합
12 수정사항 전부를 githug로 push 
